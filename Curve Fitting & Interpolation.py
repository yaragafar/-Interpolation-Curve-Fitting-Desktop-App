# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task4GUIFinal.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from audioop import reverse
from PyQt5 import QtCore, QtGui, QtWidgets
from cgitb import enable
import logging
from tkinter.constants import S
import matplotlib as mpl
from matplotlib.backends.backend_agg import FigureCanvasAgg
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QDesktopWidget

from PyQt5.QtWidgets import * 
from time import sleep
import time
from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from matplotlib.figure import Figure
from numpy.core.fromnumeric import reshape
import pyqtgraph.exporters

from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QColorDialog, QFileDialog, QFrame, QWidget, QInputDialog, QLineEdit,QComboBox
import os
import numpy as np
from PyQt5.QtWidgets import QMessageBox
import sys 
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QColorDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import QColor ,QKeySequence
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from pyqtgraph.graphicsItems.ScatterPlotItem import Symbols
from pyqtgraph.graphicsItems.ImageItem import ImageItem
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import cv2
import io
from numpy.fft import fft, fftfreq, ifft
from scipy.fftpack import fft, ifft
from scipy import signal
import cmath
from scipy.io.wavfile import write
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph.exporters
from fpdf import FPDF
import statistics
from pyqtgraph import PlotWidget
import pyqtgraph
from pyqtgraph import *
import pyqtgraph as pg
from pyqtgraph import PlotWidget, PlotItem
#from matplotlib.pyplot import draw
import matplotlib.pyplot as plt
from scipy.fftpack import fft, ifft
import pandas as pd
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QColorDialog, QFileDialog, QFrame, QWidget, QInputDialog, QLineEdit,QComboBox
import os
import numpy as np
from PyQt5.QtWidgets import QMessageBox
import sys 
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QColorDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtGui import QColor
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from pyqtgraph.graphicsItems.ScatterPlotItem import Symbols
from pyqtgraph.graphicsItems.ImageItem import ImageItem
from matplotlib.figure import Figure
import io
from numpy.fft import fft, fftfreq, ifft
from scipy.fftpack import fft, ifft
from scipy import signal
import cmath
import cv2
pg.setConfigOption('background', 'w')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(694, 599)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.FittingOptionsContianer = QtWidgets.QWidget(self.centralwidget)
        self.FittingOptionsContianer.setMaximumSize(QtCore.QSize(150, 16777215))
        self.FittingOptionsContianer.setObjectName("FittingOptionsContianer")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.FittingOptionsContianer)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.FittingOptionsLabel = QtWidgets.QLabel(self.FittingOptionsContianer)
        self.FittingOptionsLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.FittingOptionsLabel.setFont(font)
        self.FittingOptionsLabel.setObjectName("FittingOptionsLabel")
        self.verticalLayout_2.addWidget(self.FittingOptionsLabel)
        self.toolBox = QtWidgets.QToolBox(self.FittingOptionsContianer)
        self.toolBox.setObjectName("toolBox")
        self.CurvefittingOptionsPage1 = QtWidgets.QWidget()
        self.CurvefittingOptionsPage1.setGeometry(QtCore.QRect(0, 0, 132, 447))
        self.CurvefittingOptionsPage1.setObjectName("CurvefittingOptionsPage1")
        self.ExtrapolationLabel = QtWidgets.QLabel(self.CurvefittingOptionsPage1)
        self.ExtrapolationLabel.setGeometry(QtCore.QRect(0, 100, 121, 20))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ExtrapolationLabel.setFont(font)
        self.ExtrapolationLabel.setObjectName("ExtrapolationLabel")
        self.ExtrapolationEfficiencySlider = QtWidgets.QSlider(self.CurvefittingOptionsPage1)
        self.ExtrapolationEfficiencySlider.setGeometry(QtCore.QRect(50, 140, 22, 231))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.ExtrapolationEfficiencySlider.setFont(font)
        self.ExtrapolationEfficiencySlider.setMinimum(1)
        self.ExtrapolationEfficiencySlider.setMaximum(10)
        self.ExtrapolationEfficiencySlider.setSingleStep(1)
        self.ExtrapolationEfficiencySlider.setPageStep(1)
        self.ExtrapolationEfficiencySlider.setSliderPosition(10)
        self.ExtrapolationEfficiencySlider.setTracking(True)
        self.ExtrapolationEfficiencySlider.setOrientation(QtCore.Qt.Vertical)
        self.ExtrapolationEfficiencySlider.setInvertedAppearance(False)
        self.ExtrapolationEfficiencySlider.setInvertedControls(False)
        self.ExtrapolationEfficiencySlider.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.ExtrapolationEfficiencySlider.setTickInterval(0)
        self.ExtrapolationEfficiencySlider.setObjectName("ExtrapolationEfficiencySlider")
        self.maxExtrapolationlabel = QtWidgets.QLabel(self.CurvefittingOptionsPage1)
        self.maxExtrapolationlabel.setGeometry(QtCore.QRect(0, 135, 41, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.maxExtrapolationlabel.setFont(font)
        self.maxExtrapolationlabel.setObjectName("maxExtrapolationlabel")
        self.minExtrapolationLabel = QtWidgets.QLabel(self.CurvefittingOptionsPage1)
        self.minExtrapolationLabel.setGeometry(QtCore.QRect(10, 355, 31, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.minExtrapolationLabel.setFont(font)
        self.minExtrapolationLabel.setObjectName("minExtrapolationLabel")
        self.layoutWidget = QtWidgets.QWidget(self.CurvefittingOptionsPage1)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 0, 131, 89))
        self.layoutWidget.setObjectName("layoutWidget")
        self.numChunlsVerticalLayoutFittingOptions = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.numChunlsVerticalLayoutFittingOptions.setContentsMargins(0, 0, 0, 0)
        self.numChunlsVerticalLayoutFittingOptions.setObjectName("numChunlsVerticalLayoutFittingOptions")
        self.numChunksLabel = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.numChunksLabel.setFont(font)
        self.numChunksLabel.setObjectName("numChunksLabel")
        self.numChunlsVerticalLayoutFittingOptions.addWidget(self.numChunksLabel)
        self.OneChunkRadioButton = QtWidgets.QRadioButton(self.layoutWidget)
        self.OneChunkRadioButton.setObjectName("OneChunkRadioButton")
        self.numChunlsVerticalLayoutFittingOptions.addWidget(self.OneChunkRadioButton)
        self.MultipleChunksRadioButton = QtWidgets.QRadioButton(self.layoutWidget)
        self.MultipleChunksRadioButton.setObjectName("MultipleChunksRadioButton")
        self.numChunlsVerticalLayoutFittingOptions.addWidget(self.MultipleChunksRadioButton)
        self.NumberChunksSpinBox = QtWidgets.QSpinBox(self.layoutWidget)
        self.NumberChunksSpinBox.setMaximum(10)
        self.NumberChunksSpinBox.setObjectName("NumberChunksSpinBox")
        self.numChunlsVerticalLayoutFittingOptions.addWidget(self.NumberChunksSpinBox)
        self.toolBox.addItem(self.CurvefittingOptionsPage1, "")
        self.CurvefittingOptionsPage2 = QtWidgets.QWidget()
        self.CurvefittingOptionsPage2.setGeometry(QtCore.QRect(0, 0, 132, 447))
        self.CurvefittingOptionsPage2.setObjectName("CurvefittingOptionsPage2")
        self.OrderOfInterpolationLabel = QtWidgets.QLabel(self.CurvefittingOptionsPage2)
        self.OrderOfInterpolationLabel.setGeometry(QtCore.QRect(0, 180, 131, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.OrderOfInterpolationLabel.setFont(font)
        self.OrderOfInterpolationLabel.setObjectName("OrderOfInterpolationLabel")
        self.InterPolationOrderSlider = QtWidgets.QSlider(self.CurvefittingOptionsPage2)
        self.InterPolationOrderSlider.setGeometry(QtCore.QRect(80, 210, 22, 171))
        self.InterPolationOrderSlider.setMaximum(9)
        self.InterPolationOrderSlider.setMinimum(2)
        self.InterPolationOrderSlider.setPageStep(9)
        self.InterPolationOrderSlider.setOrientation(QtCore.Qt.Vertical)
        self.InterPolationOrderSlider.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.InterPolationOrderSlider.setObjectName("InterPolationOrderSlider")
        self.order1Label = QtWidgets.QLabel(self.CurvefittingOptionsPage2)
        self.order1Label.setGeometry(QtCore.QRect(10, 370, 47, 13))
        self.order1Label.setObjectName("order1Label")
        self.order10Label = QtWidgets.QLabel(self.CurvefittingOptionsPage2)
        self.order10Label.setGeometry(QtCore.QRect(0, 210, 61, 16))
        self.order10Label.setObjectName("order10Label")
        self.lcdOrder = QtWidgets.QLCDNumber(self.CurvefittingOptionsPage2)
        self.lcdOrder.setGeometry(QtCore.QRect(10, 400, 41, 31))
        self.lcdOrder.setObjectName("lcdOrder")
        self.LCDOrderLabel = QtWidgets.QLabel(self.CurvefittingOptionsPage2)
        self.LCDOrderLabel.setGeometry(QtCore.QRect(70, 405, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.LCDOrderLabel.setFont(font)
        self.LCDOrderLabel.setObjectName("LCDOrderLabel")
        self.layoutWidget1 = QtWidgets.QWidget(self.CurvefittingOptionsPage2)
        self.layoutWidget1.setGeometry(QtCore.QRect(0, 10, 121, 42))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.numChunksFittingOptionsVerticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.numChunksFittingOptionsVerticalLayout.setContentsMargins(0, 0, 0, 0)
        self.numChunksFittingOptionsVerticalLayout.setObjectName("numChunksFittingOptionsVerticalLayout")
        self.ChunkNumberLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.ChunkNumberLabel.setFont(font)
        self.ChunkNumberLabel.setObjectName("ChunkNumberLabel")
        self.numChunksFittingOptionsVerticalLayout.addWidget(self.ChunkNumberLabel)
       
        
        #self.ChunkNumberComboBox = QtWidgets.QComboBox(self.layoutWidget1)
        #self.ChunkNumberComboBox.setObjectName("ChunkNumberComboBox")
        #self.numChunksFittingOptionsVerticalLayout.addWidget(self.ChunkNumberComboBox)
        
        self.layoutWidget2 = QtWidgets.QWidget(self.CurvefittingOptionsPage2)
        self.layoutWidget2.setGeometry(QtCore.QRect(0, 60, 122, 108))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.typeofInterpolationFittingOptionsVerticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.typeofInterpolationFittingOptionsVerticalLayout.setContentsMargins(0, 0, 0, 0)
        self.typeofInterpolationFittingOptionsVerticalLayout.setObjectName("typeofInterpolationFittingOptionsVerticalLayout")
        self.typeofInterpolationLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.typeofInterpolationLabel.setFont(font)
        self.typeofInterpolationLabel.setObjectName("typeofInterpolationLabel")
        self.typeofInterpolationFittingOptionsVerticalLayout.addWidget(self.typeofInterpolationLabel)
        self.LinearInterpRadioBtn = QtWidgets.QRadioButton(self.layoutWidget2)
        self.LinearInterpRadioBtn.setObjectName("LinearInterpRadioBtn")
        self.typeofInterpolationFittingOptionsVerticalLayout.addWidget(self.LinearInterpRadioBtn)
        self.PolynomialInterpRadioBtn = QtWidgets.QRadioButton(self.layoutWidget2)
        self.PolynomialInterpRadioBtn.setObjectName("PolynomialInterpRadioBtn")
        self.typeofInterpolationFittingOptionsVerticalLayout.addWidget(self.PolynomialInterpRadioBtn)
        
        self.toolBox.addItem(self.CurvefittingOptionsPage2, "")
        self.verticalLayout_2.addWidget(self.toolBox)
        self.horizontalLayout.addWidget(self.FittingOptionsContianer)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout.addWidget(self.line_2)
        self.GraphingContainer = QtWidgets.QWidget(self.centralwidget)
        self.GraphingContainer.setMinimumSize(QtCore.QSize(0, 0))
        self.GraphingContainer.setMaximumSize(QtCore.QSize(600, 16777215))
        self.GraphingContainer.setObjectName("GraphingContainer")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.GraphingContainer)
        self.verticalLayout.setObjectName("verticalLayout")
        self.CurveFittingLabel = QtWidgets.QLabel(self.GraphingContainer)
        self.CurveFittingLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.CurveFittingLabel.setFont(font)
        self.CurveFittingLabel.setObjectName("CurveFittingLabel")
        self.verticalLayout.addWidget(self.CurveFittingLabel)
        self.CurveFittingGraph = pyqtgraph.PlotWidget(self.GraphingContainer)
        self.CurveFittingGraph.setObjectName("CurveFittingGraph")
        self.verticalLayout.addWidget(self.CurveFittingGraph)
        self.line_3 = QtWidgets.QFrame(self.GraphingContainer)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout.addWidget(self.line_3)
        self.ErrorMappingLabel = QtWidgets.QLabel(self.GraphingContainer)
        self.ErrorMappingLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ErrorMappingLabel.setFont(font)
        self.ErrorMappingLabel.setObjectName("ErrorMappingLabel")
        self.verticalLayout.addWidget(self.ErrorMappingLabel)
        self.ErrorMappingGraph = QtWidgets.QLabel(self.GraphingContainer)
        self.ErrorMappingGraph.setObjectName("ErrorMappingGraph")
        self.verticalLayout.addWidget(self.ErrorMappingGraph)
        self.horizontalLayout.addWidget(self.GraphingContainer)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout.addWidget(self.line)
        self.DataContainer = QtWidgets.QWidget(self.centralwidget)
        self.DataContainer.setMinimumSize(QtCore.QSize(100, 0))
        self.DataContainer.setObjectName("DataContainer")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.DataContainer)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.MathematicsLabel = QtWidgets.QLabel(self.DataContainer)
        self.MathematicsLabel.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.MathematicsLabel.setFont(font)
        self.MathematicsLabel.setObjectName("MathematicsLabel")
        
        self.verticalLayout_5.addWidget(self.MathematicsLabel)
        self.MathDisplayArea = QTableWidget(self.DataContainer)
        self.MathDisplayArea.setObjectName("MathDisplayArea")
        self.MathDisplayArea.setMaximumSize(QtCore.QSize(16777215, 270))

        
        self.MathDisplayArea.setColumnCount(2)  
        self.MathDisplayArea.setHorizontalHeaderLabels(["Equation"," Standard Error"])	
        self.MathDisplayArea.resizeColumnsToContents()
        self.MathDisplayArea.verticalHeader().setDefaultSectionSize(30)
        self.verticalLayout_5.addWidget(self.MathDisplayArea)
        self.ErrorMappingLabel_2 = QtWidgets.QLabel(self.DataContainer)
        self.ErrorMappingLabel_2.setMaximumSize(QtCore.QSize(16777215, 15))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.ErrorMappingLabel_2.setFont(font)
        self.ErrorMappingLabel_2.setObjectName("ErrorMappingLabel_2")
        self.verticalLayout_5.addWidget(self.ErrorMappingLabel_2)
        self.ErrorMappingContainer = QtWidgets.QWidget(self.DataContainer)
        self.ErrorMappingContainer.setObjectName("ErrorMappingContainer")
        self.ErrorMappingButton = QtWidgets.QPushButton(self.ErrorMappingContainer)
        self.ErrorMappingButton.setGeometry(QtCore.QRect(10, 180, 75, 23))
        self.ErrorMappingButton.setObjectName("ErrorMappingButton")
        self.ErrorMappingProgressBar = QtWidgets.QProgressBar(self.ErrorMappingContainer)
        self.ErrorMappingProgressBar.setGeometry(QtCore.QRect(110, 180, 171, 23))
        self.ErrorMappingProgressBar.setProperty("value", 0)
        self.ErrorMappingProgressBar.setTextVisible(True)
        self.ErrorMappingProgressBar.setOrientation(QtCore.Qt.Horizontal)
        self.ErrorMappingProgressBar.setInvertedAppearance(False)
        self.ErrorMappingProgressBar.setObjectName("ErrorMappingProgressBar")
        self.XaxisLabel = QtWidgets.QLabel(self.ErrorMappingContainer)
        self.XaxisLabel.setGeometry(QtCore.QRect(10, 100, 47, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.XaxisLabel.setFont(font)
        self.XaxisLabel.setObjectName("XaxisLabel")
        self.YaxisLabel = QtWidgets.QLabel(self.ErrorMappingContainer)
        self.YaxisLabel.setGeometry(QtCore.QRect(10, 140, 47, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.YaxisLabel.setFont(font)
        self.YaxisLabel.setObjectName("YaxisLabel")
        self.xAxisOptionsContainer = QtWidgets.QWidget(self.ErrorMappingContainer)
        self.xAxisOptionsContainer.setGeometry(QtCore.QRect(70, 90, 241, 31))
        self.xAxisOptionsContainer.setObjectName("xAxisOptionsContainer")
        self.xAxisNumChunksRadioBtn = QtWidgets.QRadioButton(self.xAxisOptionsContainer)
        self.xAxisNumChunksRadioBtn.setGeometry(QtCore.QRect(0, 10, 82, 17))
        self.xAxisNumChunksRadioBtn.setObjectName("xAxisNumChunksRadioBtn")
        self.xAxisInterpolationRadioBtn = QtWidgets.QRadioButton(self.xAxisOptionsContainer)
        self.xAxisInterpolationRadioBtn.setGeometry(QtCore.QRect(80, 10, 151, 17))
        self.xAxisInterpolationRadioBtn.setObjectName("xAxisInterpolationRadioBtn")
        self.xAxisOverlapRadioBtn = QtWidgets.QRadioButton(self.xAxisOptionsContainer)
        self.xAxisOverlapRadioBtn.setGeometry(QtCore.QRect(160, 10, 151, 17))
        self.xAxisOverlapRadioBtn.setObjectName("xAxisOverlapRadioBtn")
        self.yAxisOptionsContainer = QtWidgets.QWidget(self.ErrorMappingContainer)
        self.yAxisOptionsContainer.setGeometry(QtCore.QRect(70, 130, 221, 31))
        self.yAxisOptionsContainer.setObjectName("yAxisOptionsContainer")
        self.yAxisNumChunksRadioBtn = QtWidgets.QRadioButton(self.yAxisOptionsContainer)
        self.yAxisNumChunksRadioBtn.setGeometry(QtCore.QRect(0, 10, 82, 16))
        self.yAxisNumChunksRadioBtn.setObjectName("yAxisNumChunksRadioBtn")
        self.yAxisInterpolationRadioBtn = QtWidgets.QRadioButton(self.yAxisOptionsContainer)
        self.yAxisInterpolationRadioBtn.setGeometry(QtCore.QRect(80, 10, 151, 17))
        self.yAxisInterpolationRadioBtn.setObjectName("yAxisInterpolationRadioBtn")
        self.yAxisOverLapRadioBtn = QtWidgets.QRadioButton(self.yAxisOptionsContainer)
        self.yAxisOverLapRadioBtn.setGeometry(QtCore.QRect(160, 10, 151, 17))
        self.yAxisOverLapRadioBtn.setObjectName("yAxisOverLapRadioBtn")
        self.chooseChunkLabel = QtWidgets.QLabel(self.ErrorMappingContainer)
        self.chooseChunkLabel.setGeometry(QtCore.QRect(10, 0, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.chooseChunkLabel.setFont(font)
        self.chooseChunkLabel.setObjectName("chooseChunkLabel")
        self.chooseOrderLabel = QtWidgets.QLabel(self.ErrorMappingContainer)
        self.chooseOrderLabel.setGeometry(QtCore.QRect(10, 30, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.chooseOrderLabel.setFont(font)
        self.chooseOrderLabel.setObjectName("chooseOrderLabel")
        self.ChooseChunkComboBox = QtWidgets.QComboBox(self.ErrorMappingContainer)
        self.ChooseChunkComboBox.setGeometry(QtCore.QRect(140, 0, 131, 22))
        self.ChooseChunkComboBox.setObjectName("ChooseChunkComboBox")
        self.ChooseOrderComboBox = QtWidgets.QComboBox(self.ErrorMappingContainer)
        self.ChooseOrderComboBox.setGeometry(QtCore.QRect(140, 30, 131, 22))
        self.ChooseOrderComboBox.setObjectName("ChooseOrderComboBox")
        self.ChooseOverLapLabel = QtWidgets.QLabel(self.ErrorMappingContainer)
        self.ChooseOverLapLabel.setGeometry(QtCore.QRect(10, 60, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Leelawadee")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.ChooseOverLapLabel.setFont(font)
        self.ChooseOverLapLabel.setObjectName("ChooseOverLapLabel")
        self.ChooseOverlappingComboBox = QtWidgets.QComboBox(self.ErrorMappingContainer)
        self.ChooseOverlappingComboBox.setGeometry(QtCore.QRect(140, 60, 131, 22))
        self.ChooseOverlappingComboBox.setObjectName("ChooseOverlappingComboBox")
        self.verticalLayout_5.addWidget(self.ErrorMappingContainer)
        self.horizontalLayout.addWidget(self.DataContainer)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 694, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuGraphs_Options = QtWidgets.QMenu(self.menubar)
        self.menuGraphs_Options.setObjectName("menuGraphs_Options")
        self.menuCurve_Fitting = QtWidgets.QMenu(self.menuGraphs_Options)
        self.menuCurve_Fitting.setObjectName("menuCurve_Fitting")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        self.actionSave_Curve_fitting_IMG = QtWidgets.QAction(MainWindow)
        self.actionSave_Curve_fitting_IMG.setObjectName("actionSave_Curve_fitting_IMG")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionCurveZoom_in = QtWidgets.QAction(MainWindow)
        self.actionCurveZoom_in.setObjectName("actionCurveZoom_in")
        self.actioncurveZoom_out = QtWidgets.QAction(MainWindow)
        self.actioncurveZoom_out.setObjectName("actioncurveZoom_out")
        self.actionRun_EM = QtWidgets.QAction(MainWindow)
        self.actionRun_EM.setObjectName("actionRun_EM")
        self.actionErrorZoom_in_2 = QtWidgets.QAction(MainWindow)
        self.actionErrorZoom_in_2.setObjectName("actionErrorZoom_in_2")
        self.actionErrorZoom_out_2 = QtWidgets.QAction(MainWindow)
        self.actionErrorZoom_out_2.setObjectName("actionErrorZoom_out_2")
        self.menuFile.addAction(self.actionOpen_File)
        self.menuFile.addAction(self.actionSave_Curve_fitting_IMG)
        self.menuFile.addAction(self.actionExit)
        self.menuCurve_Fitting.addAction(self.actionCurveZoom_in)
        self.menuCurve_Fitting.addAction(self.actioncurveZoom_out)
        self.menuGraphs_Options.addAction(self.menuCurve_Fitting.menuAction())
        self.menuGraphs_Options.addSeparator()
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuGraphs_Options.menuAction())

        self.retranslateUi(MainWindow)
        self.toolBox.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.FittingOptionsLabel.setText(_translate("MainWindow", "Fitting Options"))
        self.ExtrapolationLabel.setText(_translate("MainWindow", "Extrapolation %"))
        self.maxExtrapolationlabel.setText(_translate("MainWindow", "100%"))
        self.minExtrapolationLabel.setText(_translate("MainWindow", "10%"))
        self.numChunksLabel.setText(_translate("MainWindow", "Num Chunks"))
        self.OneChunkRadioButton.setText(_translate("MainWindow", "One Chunk"))
        self.MultipleChunksRadioButton.setText(_translate("MainWindow", "Multiple Chunks"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.CurvefittingOptionsPage1), _translate("MainWindow", "Num of chunks"))
        self.OrderOfInterpolationLabel.setText(_translate("MainWindow", "Interpol. Order"))
        self.order1Label.setText(_translate("MainWindow", "2nd order"))
        self.order10Label.setText(_translate("MainWindow", "9th order"))
        self.LCDOrderLabel.setText(_translate("MainWindow", "Order"))
        
        
       # self.ChunkNumberLabel.setText(_translate("MainWindow", "Chunk Number"))
        
        
        self.typeofInterpolationLabel.setText(_translate("MainWindow", "Interpol. Type"))
        self.LinearInterpRadioBtn.setText(_translate("MainWindow", "Linear"))
        self.PolynomialInterpRadioBtn.setText(_translate("MainWindow", "Polynomial"))
      
        self.toolBox.setItemText(self.toolBox.indexOf(self.CurvefittingOptionsPage2), _translate("MainWindow", "Interpolation Order"))
        self.CurveFittingLabel.setText(_translate("MainWindow", "Curve Fitting Area"))
        self.ErrorMappingLabel.setText(_translate("MainWindow", "Error Mapping Area"))
        self.MathematicsLabel.setText(_translate("MainWindow", "Mathematics"))
        self.ErrorMappingLabel_2.setText(_translate("MainWindow", "Error Mapping "))
        self.ErrorMappingButton.setText(_translate("MainWindow", "Run EM"))
        self.XaxisLabel.setText(_translate("MainWindow", "X-axis"))
        self.YaxisLabel.setText(_translate("MainWindow", "Y-axis"))
        self.xAxisNumChunksRadioBtn.setText(_translate("MainWindow", "Num Chunks"))
        self.xAxisInterpolationRadioBtn.setText(_translate("MainWindow", "Interp order"))
        self.xAxisOverlapRadioBtn.setText(_translate("MainWindow", "OverLap"))
        self.yAxisNumChunksRadioBtn.setText(_translate("MainWindow", "Num Chunks"))
        self.yAxisInterpolationRadioBtn.setText(_translate("MainWindow", "Interp order"))
        self.yAxisOverLapRadioBtn.setText(_translate("MainWindow", "OverLap"))
        self.chooseChunkLabel.setText(_translate("MainWindow", "Choose Chunk"))
        self.chooseOrderLabel.setText(_translate("MainWindow", "Choose Order"))
        self.ChooseOverLapLabel.setText(_translate("MainWindow", "Choose OverLap"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuGraphs_Options.setTitle(_translate("MainWindow", "Graphs Options"))
        self.menuCurve_Fitting.setTitle(_translate("MainWindow", "Curve Fitting"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File"))
        self.actionOpen_File.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave_Curve_fitting_IMG.setText(_translate("MainWindow", "Save Curve fitting IMG"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Esc"))
        self.actionCurveZoom_in.setText(_translate("MainWindow", "Zoom in"))
        self.actionCurveZoom_in.setShortcut(_translate("MainWindow", "+"))
        self.actioncurveZoom_out.setText(_translate("MainWindow", "Zoom out"))
        self.actioncurveZoom_out.setShortcut(_translate("MainWindow", "-"))
        self.actionRun_EM.setText(_translate("MainWindow", "Run EM"))
        self.actionRun_EM.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actionErrorZoom_in_2.setText(_translate("MainWindow", "Zoom in"))
        self.actionErrorZoom_in_2.setShortcut(_translate("MainWindow", "Ctrl+="))
        self.actionErrorZoom_out_2.setText(_translate("MainWindow", "Zoom out"))
        self.actionErrorZoom_out_2.setShortcut(_translate("MainWindow", "Ctrl+-"))

        #buttons connections 
        self.actionOpen_File.triggered.connect(lambda: self.openFile())
        self.actionCurveZoom_in.triggered.connect(lambda: self.zoomIn(0))
        self.actionErrorZoom_in_2.triggered.connect(lambda: self.zoomIn(1))
        self.actioncurveZoom_out.triggered.connect(lambda: self.zoomOut(0))
        self.actionErrorZoom_out_2.triggered.connect(lambda: self.zoomOut(1))
        self.OneChunkRadioButton.toggled.connect(lambda: self.NumberChunksSpinBoxDisable())
        self.MultipleChunksRadioButton.toggled.connect(lambda: self.NumberChunksSpinBoxEnable())
        self.NumberChunksSpinBox.valueChanged.connect(lambda: self.SetNumChunks(self.NumberChunksSpinBox.value()))
        self.xAxisInterpolationRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("X","Inter"))
        self.xAxisNumChunksRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("X","Chunks"))
        self.yAxisInterpolationRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("Y","Inter"))
        self.yAxisNumChunksRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("Y","Chunks"))
        self.xAxisOverlapRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("X","Over"))
        self.yAxisOverLapRadioBtn.toggled.connect(lambda: self.ErrorOptionsEnabling("Y","Over"))
        
        self.actionExit.triggered.connect(lambda: self.exit())
        self.InterPolationOrderSlider.valueChanged.connect(lambda: self.InterpolationOrdersetting(self.InterPolationOrderSlider.value()) )
        #self.InterPolationOrderSlider.valueChanged.connect(lambda : self.interpolationPrep())
        self.ExtrapolationEfficiencySlider.valueChanged.connect(lambda: self.ExtrapolationCoefEdit(self.ExtrapolationEfficiencySlider.value()))
        self.LinearInterpRadioBtn.toggled.connect(lambda: self.interpolationPrep(0))
        self.PolynomialInterpRadioBtn.toggled.connect(lambda : self.interpolationPrep(1))
        
        #self.ChunkNumberComboBox.currentIndexChanged.connect(lambda : self.setChunkOrder())
        
        self.ErrorMappingButton.clicked.connect(lambda: self.errorMappingClicked())
        self.actionSave_Curve_fitting_IMG.triggered.connect(lambda: self.saveCurveFitting())
        

        #golbal varaibles of constants declaration
        self.feature=0
        self.target=0
        self.ampArray=0
        self.signalYMin=0
        self.signalYMax=0
        self.signalXmin=0
        self.signalXmax=0
        self.numChunks=1  
        self.overLappingTimes=6     
        self.Chunkorder=0
        self.polyVectors = np.array([])
        self.axis=""
        self.type=""
        self.errorMappingClickedTime=0
        #setting order default to 1
        self.InterpolationOrder=self.InterPolationOrderSlider.value()
        self.lcdOrder.display(self.InterpolationOrder)
        self.interpolationTypeFlag=-1
        self.errorComboBoxFlag = 0
        self.ErrorMapXaxis=""
        self.ErrorMapYaxis=""
        self.result=[]
        self.logHistory=[]
        self.display_counter=0
        #diasbling the num spinbox by default to avoid errors
        self.NumberChunksSpinBox.setDisabled(True)
        #changing LCD color
        self.lcdOrder.setStyleSheet('background-color:black')
        #setting extrapolation coeff to 100% by default
        self.ExtrapolationCoef=100
        self.errorMappingProg=1


    def saveCurveFitting(self):
        exporterFitting= pyqtgraph.exporters.ImageExporter(self.CurveFittingGraph.scene())
        exporterFitting.export('curveFitting.png') 
        self.logHistory.append("The user clicked on the save curve fit graph as an image and saved it under the name curveFitting.png")
        self.logging()
    def openFile(self):
        """Opens the chosen file from local machine"""
        #try:
        self.file_path=QFileDialog.getOpenFileName()[0]
        self.read_data(self.file_path)
        self.logHistory.append("The user opened a file")
        self.logging()
        
 

        #except ParserError:
         #   print("please choose a csv file")
            
     
    def read_data(self,file_name):
        """loads the data from chosen file"""
        self.CurveFittingGraph.clear()
        self.MathDisplayArea.setRowCount(0)
        dataFile=pd.read_csv(r"{}".format(file_name))
        self.label1=file_name
        self.feature=list(pd.to_numeric(dataFile.iloc[:,0],downcast="float"))
        self.target=list(pd.to_numeric(dataFile.iloc[:,-1],downcast="float"))
        self.signalYMin=min(self.target)
        self.signalYMax=max(self.target)
        self.signalXMin=min(self.feature)
        self.signalXMax=max(self.feature)
        self.settingCurveLimits()
        self.logHistory.append("The GUI read the data from the file that was opened")
        self.logging()
        self.draw(self.feature,self.target)

    def settingCurveLimits(self):
        self.CurveFittingGraph.setLimits(xMin=self.signalXMin)
        self.CurveFittingGraph.setLimits(yMin=self.signalYMin)
        self.CurveFittingGraph.setLimits(yMax=self.signalYMax)
        self.logHistory.append("The curve fitting graphing area's X-axis and Y-axis limits were set")
        self.logging()

# =============================================================================
#     def setChunkOrder(self):
#         self.Chunkorder= int(self.ChunkNumberComboBox.currentIndex())+1
#         if( self.PolynomialInterpRadioBtn.isChecked() or self.LinearInterpRadioBtn.isChecked):
#             if(self.interpolationTypeFlag ==0):
#                 self.linearInterpolate()
#             elif(self.interpolationTypeFlag ==1):
#                 self.polyInterpolate()
#             else:
#                 print("Please choose an interpolation type from the radio buttons")
#         else:
#             pass
#         self.logHistory.append("The chunk order was chosen from the combobox")
#         self.logging()
# =============================================================================


    def draw(self,feature,target):
        """sets up our canvas to plot"""
        self.index=0 
        self.CurveFittingGraph.plot(self.feature[0:1000], self.target[0:1000], pen="red")

        try:
          self.InterpolationOrdersetting()
          self.ChunkNumberComboBox()
          self.ChooseChunkComboBox()
        except:
            pass
        self.logHistory.append("The Draw function was called")
        self.logging()
        
    def zoomIn(self, val):
        self.CurveFittingGraph.getViewBox().scaleBy((0.5,0.5))
        self.logHistory.append("The user choose to zoom in on the curve fitting graphing area")
        self.logging()
    
    def zoomOut(self,val):
        self.CurveFittingGraph.getViewBox().scaleBy((2,2))
        self.logHistory.append("The user choose to zoom out on the curve fitting graphing area")
        self.logging()
    def errorMappingClicked(self):
        self.errorMappingClickedTime=self.errorMappingClickedTime+1
        if self.errorMappingClickedTime % 2 != 0:
            self.logHistory.append("The Error mapping run button was clicked")
            self.logging()
            self.ErrorMappingButton.setText("Stop EM")
            self.errCalc(1)
        elif self.errorMappingClickedTime %2 ==0:
            self.logHistory.append("The Error mapping stop button was clicked")
            self.logging()
            self.ErrorMappingButton.setText("Run EM")
            self.errCalc(0)
            self.ErrorMappingProgressBar.setValue(0)
        

    def errorMap(self, errorVals,x,y):
        self.arr=[]
        lis = [j for j in range(0, int(x))]
        lisx = [i for i in range(0, int(y))]
        print(errorVals)
        err = reshape((errorVals), (len(lisx), len(lis)))
        plt.imshow(err, cmap='inferno', interpolation='none',aspect='auto')
        #plt.contourf(lis, lisx, err, cmap='inferno')
        self.logHistory.append("The error map was generated")
        self.logging()
        plt.colorbar()
        plt.xlabel(x)
        plt.ylabel(y)
        plt.savefig('fig.png')
        plt.show()
        plt.close()
        self.ErrorMappingGraph.setMaximumHeight(300)
        self.ErrorMappingGraph.setMaximumWidth(400)
        self.ErrorMappingGraph.setPixmap(QPixmap('fig.png'))
        self.ErrorMappingGraph.setScaledContents(True)
        

    def errCalc(self, en):
        InterFlag=0
        if(self.ErrorMapXaxis=="Chunks"):
            x=self.numChunks
        if(self.ErrorMapYaxis=="Chunks"):
            y=self.numChunks
            InterFlag=1
        if(self.ErrorMapXaxis=="Over" ):
            x=6
        if(self.ErrorMapYaxis=="Over"):
            y=6
        if(self.ErrorMapYaxis=="Inter"):
            y=self.InterpolationOrder
        if(self.ErrorMapXaxis=="Inter"):
            x=self.InterpolationOrder
            InterFlag=1
        self.logHistory.append("The Radio buttons determining which axes hold which values in the error map were checked")
        self.logging()
        if en==0:
            self.logHistory.append("Collapsing the error area")
            self.logging()
            #self.ErrorMappingGraph.setMaximumHeight(0)
            self.ErrorMappingProgressBar.setValue(0)
        else:
            self.errArr=[]
            if self.numChunks==1:
                self.result=numpy.linalg.norm(self.target)-numpy.linalg.norm(self.y_axis)/numpy.linalg.norm(self.target)
                self.errArr.append(self.result)
            elif self.numChunks>1:
                self.fixedOverLapValue=int((int(self.ChooseOverlappingComboBox.currentText())/100) * len(self.x_axis))
                    #print(self.fixedOverLapValue)
                for i in range(1,x+1,1):
                        
                    for j in range (y):
                            #self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*i:self.fixedOverLapValue+ len(self.x_axis)*(i+1) if i < self.numChunks else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*i:self.fixedOverLapValue+ len(self.x_axis)*(i+1) if i < self.numChunks else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*i:self.fixedOverLapValue+ len(self.x_axis)*(i+1) if i < self.numChunks else 1000])
                            #print(self.result)
                            if InterFlag==1:
                                coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1]  ,deg=j)
                            else:
                                coeff=np.polyfit(self.feature[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1 ] , self.target[(i-1)*int(self.maxLength/self.numChunks) : (i*int(self.maxLength/self.numChunks))-1]  ,deg=self.InterPolationOrderSlider.value())
                            self.polyVectors = coeff
                            polynomial= np.poly1d(coeff)
                            self.targetError=self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)]
                            self.y_axisError=polynomial(self.feature[(i-1)*int(self.maxLength/self.numChunks):(i-1)*int(self.maxLength/self.numChunks)+int(self.maxLength/self.numChunks)])
                            self.result=numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks+1 else 1000])-numpy.linalg.norm(self.y_axis[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])/numpy.linalg.norm(self.target[self.fixedOverLapValue+ len(self.x_axis)*(i-1):self.fixedOverLapValue+ len(self.x_axis)*i if i < self.numChunks-1 else 1000])
                            
                            print("the error maaaap",self.result)
                            
                            self.errArr.append(abs(self.result))
                            self.ErrorMappingProgressBar.setValue(self.errorMappingProg)
                            self.errorMappingProg+=1
                if 100-self.errorMappingProg> 0:
                    self.ErrorMappingProgressBar.setValue(100)
                self.errorMappingProg=0
                sleep(1)
                self.ErrorMappingProgressBar.setValue(self.errorMappingProg)
            self.errorMap(self.errArr,x,y)     
            self.logHistory.append("End of error calculations") 
            self.errorMappingClicked()
                


    def NumberChunksSpinBoxDisable(self):
        self.NumberChunksSpinBox.setDisabled(True)
        self.numChunks=1
        self.ChooseOverlappingComboBox.clear()
        self.xAxisOverlapRadioBtn.setDisabled(True)
        self.yAxisOverLapRadioBtn.setDisabled(True)
        self.ChunkNumberComboBoxEdit()
        self.ErrorOptionsEnabling(self.axis,self.type)
        self.MathDisplayArea.setRowCount(self.numChunks)
        self.logHistory.append("The number of chunks were determined by the user and stored in the corresponding combobox")
        self.logging()

    def NumberChunksSpinBoxEnable(self):
        self.NumberChunksSpinBox.setDisabled(False)

    def SetNumChunks(self,val):
        self.numChunks=val
        
        self.MathDisplayArea.setRowCount(self.numChunks)
        self.ChunkNumberComboBoxEdit()
        self.ErrorOptionsEnabling(self.axis,self.type)


    def ErrorOptionsEnabling(self, axis, type):
        self.axis=axis
        self.type=type
        
        if axis=="X":
            if type =="Inter":
                self.yAxisInterpolationRadioBtn.setDisabled(True)
                self.yAxisNumChunksRadioBtn.setDisabled(False)
                self.yAxisOverLapRadioBtn.setDisabled(False)
                self.ErrorMapXaxis="Inter"
            elif type == "Chunks":
                self.yAxisNumChunksRadioBtn.setDisabled(True)
                self.yAxisInterpolationRadioBtn.setDisabled(False)
                self.yAxisOverLapRadioBtn.setDisabled(False)
                self.ErrorMapXaxis="Chunks"
                #self.ErrorMapYaxis="Inter"
                #self.ErrorMappingGraph.setRowCount(self.numChunks)
                #self.ErrorMappingGraph.setColumnCount(self.InterPolationOrderSlider.value())
            else:
                self.yAxisOverLapRadioBtn.setDisabled(True)
                self.yAxisInterpolationRadioBtn.setDisabled(False)
                self.yAxisNumChunksRadioBtn.setDisabled(False)
                self.ErrorMapXaxis="Over"
                #self.ErrorMappingGraph.setRowCount(self.overLappingTimes)
        elif axis=="Y":
            if type =="Inter":
                self.xAxisInterpolationRadioBtn.setDisabled(True)
                self.xAxisNumChunksRadioBtn.setDisabled(False)
                self.xAxisOverlapRadioBtn.setDisabled(False)
                #self.ErrorMapXaxis="Chunks"
                self.ErrorMapYaxis="Inter"
          

            elif type =="Chunks":
                self.xAxisNumChunksRadioBtn.setDisabled(True)
                self.xAxisInterpolationRadioBtn.setDisabled(False)
                self.xAxisOverlapRadioBtn.setDisabled(False)
                #self.ErrorMapYaxis="Chunks"
                self.ErrorMapYaxis="Chunks"
            

            else:
                self.xAxisOverlapRadioBtn.setDisabled(True)
                self.xAxisInterpolationRadioBtn.setDisabled(False)
                self.xAxisNumChunksRadioBtn.setDisabled(False)
                self.ErrorMapYaxis="Over"
                #self.ErrorMappingGraph.setColumnCount(self.overLappingTimes)

        if self.numChunks >1 and self.errorComboBoxFlag == 0:
            self.xAxisOverlapRadioBtn.setDisabled(False)
            self.yAxisOverLapRadioBtn.setDisabled(False)
            for i in range (0,30,5):
                self.ChooseOverlappingComboBox.addItem(str(i))
            self.errorComboBoxFlag=1
        
        

    def ChunkNumberComboBoxEdit(self):
        self.ChooseChunkComboBox.clear()
        #self.ChunkNumberComboBox.clear()
        
        for i in np.arange(1,self.numChunks+1):
            #self.ChunkNumberComboBox.addItem(str("Chunk # " +str(i)))
            self.ChooseChunkComboBox.addItem(str("Chunk # " +str(i)))
        

        self.ErrorOptionsEnabling(self.axis,self.type)

    
    def ChooseOrderComboBoxEdit(self):
        self.ChooseOrderComboBox.clear()
        self.lcdOrder.display(self.InterpolationOrder)
        for j in np.arange(1,self.InterpolationOrder+1):
            self.ChooseOrderComboBox.addItem(str("Order # " +str(j)))

        self.ErrorOptionsEnabling(self.axis,self.type)
        self.logHistory.append("The desired order was chosen ")
        self.logging()
    
    def interpolationPrep(self, val):
        self.logHistory.append("The interpolationPrep function was called")
        self.logging()
        if val == 0:
            self.interpolationTypeFlag =0
            self.linearInterpolate()
        elif val ==1:
            self.interpolationTypeFlag =1
            self.polyInterpolate()
        else:
            print("Choose an intrpolation type from the radio buttons")

    def linearInterpolate(self):
        self.logHistory.append("Linear interpolation was called")
        self.logging()
        if self.ExtrapolationCoef ==0:
            print("Please check the extrapolation slider as there mush be an error in its code lines")
        else:
            self.maxLength=int(self.ExtrapolationCoef* 1000 *0.01)
                    
            self.perform_interpolation(1)
            for self.display_counter in range (self.numChunks):
                self.linear_latex_equation(self.coeffs)
                self.write_error()
            self.ExtrapolationFunc(self.coeffs[self.Chunkorder-1])   
    
    def polyInterpolate(self):
        self.logHistory.append("Polynomial interpolation was called")
        self.logging()
        if self.ExtrapolationCoef ==0:
            print("Please check the extrapolation slider as there mush be an error in its code lines")
        else:
            self.maxLength=int(self.ExtrapolationCoef* 1000 *0.01)
            self.perform_interpolation(self.InterpolationOrder)
            for self.display_counter in range (self.numChunks):
                self.polynomial_latex_equation(self.coeffs)
                self.write_error()
            self.ExtrapolationFunc(self.coeffs[self.Chunkorder-1])

    
    def ExtrapolationFunc(self, coeff):
        self.logHistory.append("Extrapolation was called")
        self.logging()
        if self.numChunks != 1:
            pass
        else:
            if self.ExtrapolationCoef ==100:
                pass
            elif self.ExtrapolationCoef <100:

                polynomial= np.poly1d(coeff)
                print(int((1000*0.01*self.ExtrapolationCoef)))
                self.x_axis=self.feature[int((1000*0.01*self.ExtrapolationCoef)+5):5000]
                self.y_axis=polynomial(self.feature[int((1000*0.01*self.ExtrapolationCoef)+5):5000])
                self.extrapolated_curve = self.CurveFittingGraph.plot(self.x_axis,self.y_axis, pen=None , symbol = '+')
 


    
    def InterpolationOrdersetting(self, val):
        self.logHistory.append("Interpolation order setting was made")
        self.logging()
        self.InterpolationOrder=val
        self.ChooseOrderComboBoxEdit()
        if self.interpolationTypeFlag ==1:
            self.polyInterpolate()
        else:
            self.interpolationPrep(0)

    
    def ExtrapolationCoefEdit(self, val):
        self.logHistory.append("The extrapolation slider value was changed and thus the extrapolation coefficient ")
        self.logging()
        self.ExtrapolationCoef=val*10
        print(self.ExtrapolationCoef)
        self.interpolationPrep(self.interpolationTypeFlag)
        
    
    def exit(self):
        self.logHistory.append("End of session")
        self.self.logging()
        sys.exit()


    def linear_latex_equation(self,coeffs):
        self.logHistory.append("Latex equation is called")
        self.logging()
        """writes latex equation for a linear interpolation"""
        #getting signed and rounded coeffecients
        coeff=coeffs[self.display_counter]
        coeff=list(coeff)
        for i in range(0,len(coeff)):
            coeff[i]=round(coeff[i],3)
            if (coeff[i]>=0):
                coeff[i]="+"+str(coeff[i])
 
        label=self.mathTex_to_QPixmap(r'{} x {}'.format(coeff[0],coeff[1]))
        self.MathDisplayArea.setCellWidget(self.display_counter,0,label)
        self.adjust_table()

    
    def polynomial_latex_equation(self,coeffs):
        """writes latex equation for a polynomial interpolation"""
        
        #getting signed and rounded coeffecients
        coeff=coeffs[self.display_counter]
        
        coeff=list(coeff)
        for i in range(0,len(coeff)):
            coeff[i]=round(coeff[i],3)
            if (coeff[i]>=0):
                coeff[i]="+"+str(coeff[i])
   
        eq=r'{}'.format(coeff[0])+r'x^{%s}'%self.InterpolationOrder
        for i in range(self.InterpolationOrder-1,1,-1):
            eq+=r'{}'.format(coeff[self.InterpolationOrder-i])+r'x^{%s}'%i
        eq+=r'{}'.format(coeff[-2])+r'x{%s}'%coeff[-1]         
        
        label=self.mathTex_to_QPixmap(eq)
        self.MathDisplayArea.setCellWidget(self.display_counter,0,label)
        self.adjust_table() 
        

    
    
    def adjust_table(self):
        """adjusts size of rows and columns according to content"""
        self.MathDisplayArea.resizeRowsToContents()        
        self.MathDisplayArea.resizeColumnsToContents()	    
    
    def mathTex_to_QPixmap(self,mathTex):
     """converts equation into a pixmap and puts it on a label widget"""
    # set up a mpl figure instance
     fig = mpl.figure.Figure()
     fig.patch.set_facecolor('none')
     fig.set_canvas(FigureCanvasAgg(fig))
     renderer = fig.canvas.get_renderer()

    #plot the mathTex expression
     ax = fig.add_axes([0, 0, 1, 1])
     ax.axis('off')
     ax.patch.set_facecolor('none')
   #  t = ax.text(0, 0, r"$%s$" %(mathTex), ha='left', va='bottom', fontsize=15,color='blue')
     t = ax.text(0, 0, r"$%s$" %(mathTex), ha='left', va='bottom', fontsize=15,color='blue')

    #fit figure size 
     fwidth, fheight = fig.get_size_inches()
     fig_bbox = fig.get_window_extent(renderer)
     text_bbox = t.get_window_extent(renderer)
     tight_fwidth = text_bbox.width * fwidth / fig_bbox.width
     tight_fheight = text_bbox.height * fheight / fig_bbox.height
     fig.set_size_inches(tight_fwidth, tight_fheight)

    #convert mpl figure to QPixmap and put it on a label widget
     buf, size = fig.canvas.print_to_buffer()
     qimage = QtGui.QImage.rgbSwapped(QtGui.QImage(buf, size[0], size[1],QtGui.QImage.Format_ARGB32))
     qpixmap = QtGui.QPixmap(qimage)
     label = QtWidgets.QLabel()
     label.setPixmap(qpixmap)
     return label

    

    def write_error(self):
        """writes the error of interpolation in table"""
        try:
            error=cmath.sqrt(self.residuals[self.display_counter])
            error=round(error.real,3)
        except:
            error=0.0
        self.MathDisplayArea.setItem(self.display_counter,1,QTableWidgetItem(str(error)))        
        self.adjust_table()
        pass



    def split_into_chunks(self):
        self.logHistory.append("Splitting the dataset into chunks")
        self.logging()
        """splits the original data into the chosen number of chunks"""
        self.feature_chunks=np.array_split(self.feature[0:1000],self.numChunks)
        self.target_chunks=np.array_split(self.target[0:1000],self.numChunks)
        
    def perform_interpolation(self,degree):
        self.logHistory.append("Performing interpolation")
        self.logging()
        """plots the interpolation of each chunk"""
        self.coeffs=[]
        self.residuals=[]
        self.calculated_chunks=[]
        self.CurveFittingGraph.clear()
      #  self.CurveFittingGraph.plot(self.feature[0:self.maxLength], self.target[0:self.maxLength], pen="red")
        self.CurveFittingGraph.plot(self.feature[0:1000], self.target[0:1000], pen="red")
        self.split_into_chunks()     
        for i in range(len(self.feature_chunks)):
            coeff,residual,a,b,c=np.polyfit(self.feature_chunks[i] , self.target_chunks[i] ,deg =degree,full=True)
            
            print("coeffs",coeff)
            print("residuals",residual)
            
            
            self.coeffs.append(coeff)
            self.residuals.append(residual)
            
            print("coeffs list",self.coeffs)
            print("residuals list",self.residuals)
            
            polynomial= np.poly1d(coeff)
            self.CurveFittingGraph.plot(self.feature_chunks[i],polynomial(self.feature_chunks[i]),pen='blue',symbol='o')        
            self.x_axis=self.feature_chunks[i]
            self.y_axis=polynomial(self.feature_chunks[i])

    def logging(self):
        f=open("Task4Log.txt","w+")
        for i in self.logHistory:
            f.write("=> %s\r\n" %(i))
        f.close()
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())